# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: vigiabackend
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
#sls deploy --stage dev
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: sa-east-1
  timeout: 25
  versionFunctions: false
custom:	
  apiKeys:	
    - name: ApiKeyVigiA	
      usagePlan:	
        name: "usage-plan-vigia"	
        description: "Plan de uso de la api"	
        quota:	
          limit: 20000	
          period: DAY	
        throttle:	
          rateLimit: 1000	
          burstLimit: 500
functions:
  testService:
    handler: handler.testService
    events:
      - http:
          method: get
          path: /testService
          #requiere uso de la API KEY
          private: true
  ETLValidProcesses:
    handler: handler.ETLValidProcesses
    timeout: 900
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: true
  signUpUser:
    handler: handler.signUpUser
  signUpUserConfirm:
    handler: handler.signUpUserConfirm
  getProcessDNCP:
    handler: handler.getProcessDNCP
    events:
      - http:
          method: post
          path: /getProcessDNCP
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getProcessDNCPOCID:
    handler: handler.getProcessDNCPOCID
    events:
      - http:
          method: post
          path: /getProcessDNCPOCID
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  checkProcessDNCP:
    handler: handler.checkProcessDNCP
    events:
      - http:
          method: post
          path: /checkProcessDNCP
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"

  getProcuringEntities:
    handler: handler.getProcuringEntities
    events:
      - http:
          method: post
          path: /getProcuringEntities
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  searchProcessDNCP:
    handler: handler.searchProcessDNCP
    events:
      - http:
          method: post
          path: /searchProcessDNCP
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getPartyProcessesDNCP:
    handler: handler.getPartyProcessesDNCP
    events:
      - http:
          method: post
          path: /getPartyProcessesDNCP
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"

  newQuestion:
    handler: handler.addQuestion
    events:
      - http:
          method: post
          path: /newQuestion
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getLike:
    handler: handler.getLike
    events:
      - http:
          method: post
          path: /getLike
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  addLike:
    handler: handler.addLike
    events:
      - http:
          method: post
          path: /addLike
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getMyLikes:
    handler: handler.getMyLikes
    events:
      - http:
          method: post
          path: /getMyLikes
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getMyProcesses:
    handler: handler.getMyProcesses
    events:
      - http:
          method: post
          path: /getMyProcesses
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  addQuestion:
    handler: handler.addQuestion
    events:
      - http:
          method: put
          path: /addQuestion
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getQuestion:
    handler: handler.getQuestion
    events:
      - http:
          method: post
          path: /getQuestion
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getMyQuestions:
    handler: handler.getMyQuestions
    events:
      - http:
          method: post
          path: /getMyQuestions
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  addOpportunitiesConfig:
    handler: handler.addOpportunitiesConfig
    events:
      - http:
          method: post
          path: /addOpportunitiesConfig
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getOpportunitiesConfig:
    handler: handler.getOpportunitiesConfig
    events:
      - http:
          method: post
          path: /getOpportunitiesConfig
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getOpportunities:
    handler: handler.getOpportunities
    events:
      - http:
          method: post
          path: /getOpportunities
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getClaimsExtraFields:
    handler: handler.getClaimsExtraFields
    events:
      - http:
          method: post
          path: /getClaimsExtraFields
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getClaimsAgent:
    handler: handler.getClaimsAgent
    events:
      - http:
          method: post
          path: /getClaimsAgent
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getCountClaimsAgent:
    handler: handler.getCountClaimsAgent
    events:
      - http:
          method: post
          path: /getCountClaimsAgent
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getTasksQuestions:
    handler: handler.getTasksQuestions
    events:
      - http:
          method: post
          path: /getTasksQuestions
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"            
  getQuestionsAgent:
    handler: handler.getQuestionsAgent
    events:
      - http:
          method: post
          path: /getQuestionsAgent
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getCountQuestionsAgent:
    handler: handler.getCountQuestionsAgent
    events:
      - http:
          method: post
          path: /getCountQuestionsAgent
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getClaim:
    handler: handler.getClaim
    events:
      - http:
          method: post
          path: /getClaim
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  addClaim:
    handler: handler.addClaim
    events:
      - http:
          method: put
          path: /addClaim
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  addQuestionStatus:
    handler: handler.addQuestionStatus
    events:
      - http:
          method: put
          path: /addQuestionStatus
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  addClaimStatus:
    handler: handler.addClaimStatus
    events:
      - http:
          method: put
          path: /addClaimStatus
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getMyClaims:
    handler: handler.getMyClaims
    events:
      - http:
          method: post
          path: /getMyClaims
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getTasksClaims:
    handler: handler.getTasksClaims
    events:
      - http:
          method: post
          path: /getTasksClaims
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"     
  getCountRequestIndex:
    handler: handler.getCountRequestIndex
    events:
      - http:
          method: post
          path: /getCountRequestIndex
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getUserRoles:
    handler: handler.getUserRoles
    events:
      - http:
          method: post
          path: /getUserRoles
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getProcuringEntitiesRequests:
    handler: handler.getProcuringEntitiesRequests
    events:
      - http:
          method: post
          path: /getProcuringEntitiesRequests
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getUOCTasksInfo:
    handler: handler.getUOCTasksInfo
    events:
      - http:
          method: post
          path: /getUOCTasksInfo
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getUOCRequests:
    handler: handler.getUOCRequests
    events:
      - http:
          method: post
          path: /getUOCRequests
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getUOCContactPoint:
    handler: handler.getUOCContactPoint
    events:
      - http:
          method: post
          path: /getUOCContactPoint
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getRequestsReport:
    handler: handler.getRequestsReport
    timeout: 30
    events:
      - http:
          method: post
          path: /getRequestsReport
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getCountRequestReport:
    handler: handler.getCountRequestReport
    events:
      - http:
          method: post
          path: /getCountRequestReport
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"

  createTweet:
    handler: handler.createTweet
    events:
      - http:
          method: post
          path: /createTweet
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  deleteTweet:
    handler: handler.deleteTweet
    events:
      - http:
          method: post
          path: /deleteTweet
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  getUsersTweets:
    handler: handler.getUsersTweets
    events:
      - http:
          method: post
          path: /getUsersTweets
          #requiere uso de la API KEY
          private: true
          cors:
            origin: "*"
            headers: "*"
  updateRoles:
      handler: handler.updateRoles 
      events:
        - http:
            method: post
            path: /updateRoles
            #requiere uso de la API KEY
            private: true
            cors:
              origin: "*"
              headers: "*"
  getUsers:
      handler: handler.getUsers
      events:
        - http:
            method: post
            path: /getUsers
            #requiere uso de la API KEY
            private: true
            cors:
              origin: "*"
              headers: "*"
  getRoles:
      handler: handler.getRoles
      events:
        - http:
            method: post
            path: /getRoles
            #requiere uso de la API KEY
            private: true
            cors:
              origin: "*"
              headers: "*"
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

#dependencies:
#  - pg

plugins:
  - serverless-add-api-key
